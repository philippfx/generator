Creating Pipeline infrastracture

cd C:\VS_2017_Projects\aspnetcore-generator-api

REGISTRY: 
http://localhost:55000/v2/_catalog
http://my-registry:55000/v2/_catalog

docker tag aspnetcore/generator:multi my-registry:55000/aspnetcore/generator:multi (tags image, but is not pushed to registry yet)
docker push my-registry:55000/aspnetcore/generator:multi

http://my-registry:55000/v2/aspnetcore/generator/tags/list

TEAMCITY:

cd C:\VS_2017_Projects\aspnetcore-generator-api\api\infra\teamcity
docker-compose up -d

http://localfittifyapi:8111/

SQL SERVER SETUP:
put mssql-jdbc-6.2.2.jre8.jar into C:\VS_2017_Projects\aspnetcore-generator-api\api\infra\teamcity
docker cp mssql-jdbc-6.2.2.jre8.jar b99c1a82ea54:/data/teamcity_server/datadir/lib/jdbc (copies into container)

be sure to set SQL TCP Port (https://stackoverflow.com/questions/18841744/jdbc-connection-failed-error-tcp-ip-connection-to-host-failed/24299346)
and allow port 1433 in firewall



--- Creating a CI Dockerfile with Unit Test ---
Create Dockerfile in C:\VS_2017_Projects\aspnetcore-generator-api

docker build -t testing .
docker run --rm -it -p 8080:80 testing

Hosting environment: Production
Content root path: /publish
Now listening on: http://[::]:80
Application started. Press Ctrl+C to shut down.

http://localhost:8080/

docker image prune

--- Building Image on every commit ---
docker image ls

docker image ls my-registry:55000/gen

PS C:\VS_2017_Projects\aspnetcore-generator-api> docker image ls my-registry:55000/gen
REPOSITORY              TAG                 IMAGE ID            CREATED              SIZE
my-registry:55000/gen   ci-3                d862869ac1e6        About a minute ago   355MB


--- Using docker-compose for sophisticated integration testing ---

cd C:\VS_2017_Projects\aspnetcore-generator-api
mkdir integration
cd integration
dotnet new xunit
dotnet add package FluentAssertions.Json (BETTER YOU ADD IT VIA VS2017 version 4.19.0)
cp ..\api\docker-compose.yml .

docker-compose up -d

MAILHOG
http://localhost:8080/swagger/
http://localhost:8025/
http://localhost:8025/api/v2/messages

(Create Dockerfile in integration folder)
docker build -t my-registry:55000/gen:integration-6 .
docker run --rm -it my-registry:55000/gen:integration-6

cd C:\VS_2017_Projects\aspnetcore-generator-api\integration
(adjust docker-compose.yml)
docker-compose up
docker-compose up (twice is important, because the mailhog container for manual testing may be still runnning) 

docker-compose up --force-recreate --abort-on-container-exit

powershell window 1: docker-compose -p p1 up --force-recreate
powershell window 2: docker-compose -p p2 up --force-recreate

docker-compose up --force-recreate --abort-on-container-exit --build

--- Orchestrating Integration Testing on Every Commit ---
cd C:\VS_2017_Projects\aspnetcore-generator-api\api\infra\teamcity
docker-compose build
docker-compose up -d

cd  C:\VS_2017_Projects\aspnetcore-generator-api\integration
cat .\docker-compose.yml
docker-compose config

--- Demo Deploy on every commit ---
docker swarm init

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-5syf5tqrdudcycpjd0726kr1zpx2ifodfw27mbk7237gj3lfpa-8a37i0j2eaysqucvlk2om41go 192.168.65.3:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

:::::::: DOES NOT WORK ::::::::
PS C:\VS_2017_Projects\aspnetcore-generator-api\api\infra\swarm> docker stack deploy -c services/viz.yml projnameViz
Creating network projnameViz_default
Creating service projnameViz_viz

PS C:\VS_2017_Projects\aspnetcore-generator-api\api\infra\swarm> docker node ls
ID                            HOSTNAME                STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
sf8bapsjr8t1bxdcgvn4te2dz *   linuxkit-00155db22e0b   Ready               Active              Leader              18.09.0

PS C:\VS_2017_Projects\aspnetcore-generator-api\api\infra\swarm> docker node inspect --format '{{.Status.Addr}}' sf8bapsjr8t1bxdcgvn4te2dz
192.168.65.3

:::::::: WORKAROUND ::::::::

docker run -it -d -p 8095:8080 -v /var/run/docker.sock:/var/run/docker.sock dockersamples/visualizer
http://localhost:8095

PS C:\VS_2017_Projects\aspnetcore-generator-api\api\infra\swarm> docker ps
CONTAINER ID        IMAGE                                             COMMAND                  CREATED             STATUS                             PORTS                     NAMES
45fb8e846a5f        dockersamples/visualizer                          "npm start"              27 seconds ago      Up 26 seconds (health: starting)   0.0.0.0:8095->8080/tcp    romantic_torvalds
1db65a6310e2        aspnetcore/teamcity-agent-with-compose:2017.1.2   "/run-services.sh"       6 hours ago         Up 6 hours                         9090/tcp                  teamcity_teamcity-agent_1
887dc8d71623        jetbrains/teamcity-server:2017.1.2                "/run-services.sh"       29 hours ago        Up 29 hours                        0.0.0.0:8111->8111/tcp    teamcity_teamcity_1
7442e2f7ae10        registry:2.6.1                                    "/entrypoint.sh /etcâ€¦"   10 days ago         Up 29 hours                        0.0.0.0:55000->5000/tcp   registry_my-registry_1

::::::::::::::::::::::::::::::::

docker stack deploy -c .\demo.yml projNameDemo (similar to docker-compose)
docker stack ls

http://localhost:8095/ should show all demos
http://localhost:8080/ for api
http://localhost:8081/ for mailhog

docker stack ls
docker stack remove projNameDemo

--- Addubg On-demand Testing Environments to the Pipeline ---

docker-compose -f .\demo.yml config

--- Deploying to production ---